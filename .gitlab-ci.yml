image: "python:latest"

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .cache/pip
    - .cache/pypoetry

before_script:
  - apt-get update -y
  - which pip3 || apt-get install -y python3-pip
  - which poetry || pip3 install poetry
  - poetry config cache-dir ${POETRY_CACHE_DIR}
  - poetry config virtualenvs.in-project true
  - poetry install

stages:
  - lint
  - build
  - release

flake8:
  stage: lint
  script:
    - poetry run flake8 .

build:
  stage: build
  script:
    - poetry build
  artifacts:
    paths:
      - dist/*
    expire_in: 1 week

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  before_script:
    - echo "Before Script"
  script:
    - echo "Release"
  release:
    tag_name: "${CI_COMMIT_TAG}"
    name: "${CI_PROJECT_NAME} ${CI_COMMIT_TAG}"
    description: |
      Package is available in Gitlab PyPI Registry ${CI_PROJECT_URL}/-/packages
  needs:
    - job: build
      artifacts: True
  # run only on tagged commits on master branch
  only:
    - tags
  except:
    - branches

publish:
  stage: release
  script:
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish -r gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}
  needs:
    - job: build
      artifacts: True
  # run only on tagged commits on master branch
  only:
    - tags
  except:
    - branches
